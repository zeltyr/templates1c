{1,
{9,
{"Шаблоны кода",1,0,"",""},
{4,
{"Препроцессоры",1,0,"",""},
{0,
{"Экранирование модулей объекта / менеджера",0,0,"","#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
	
	
#Иначе
	
	ВызватьИсключение НСтр(""ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'"");
	
#КонецЕсли"}
},
{0,
{"ТолстыйКлиентОбычноеПриложение",0,1,"ТолстыйКлиентОбычноеПриложение","#Если ТолстыйКлиентОбычноеПриложение Тогда
	
	
#КонецЕсли
"}
},
{0,
{"ТолстыйКлиентУправляемоеПриложение",0,1,"ТолстыйКлиентУправляемоеПриложение","#Если ТолстыйКлиентУправляемоеПриложение Тогда
	
	
#КонецЕсли
"}
},
{0,
{"ТолстыйКлиентОбычноеИУправляемое",0,1,"ТолстыйКлиентОбычноеИУправляемое","#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
	
	
#КонецЕсли
"}
}
},
{11,
{"Стандарты оформления",1,0,"",""},
{0,
{"Переменная",0,1,"Перем","Перем <?""Введите имя переменной"">; // <?""Введите описание переменной"">"}
},
{0,
{"Модуль общий",0,1,"МодульОбщ[ий]","////////////////////////////////////////////////////////////////////////////////
// Заголовок модуля представляет собой комментарий в самом начале модуля. 
// В заголовке модуля приводится его краткое описание и условия применения.
// Для модулей форм в заголовке рекомендуется размещать описание параметров формы.
//
// Н-р: Клиентские процедуры и функции общего назначения:
// - для работы со списками в формах;
// - для работы с журналом регистрации;
// - для обработки действий пользователя в процессе редактирования
//   многострочного текста, например комментария в документах;
// - прочее.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

 // содержит экспортные процедуры и функции, предназначенные для использования другими объектами конфигурации 
 // или другими программами (например, через внешнее соединение).



#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// предназначен для модулей, которые являются частью некоторой функциональной подсистемы. 
// В нем должны быть размещены экспортные процедуры и функции, которые допустимо вызывать 
// только из других функциональных подсистем этой же библиотеки.



#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// содержит процедуры и функции, составляющие внутреннюю реализацию общего модуля. 
// В тех случаях, когда общий модуль является частью некоторой функциональной подсистемы, 
// включающей в себя несколько объектов метаданных, в этом разделе также могут быть размещены служебные 
// экспортные процедуры и функции, предназначенные только для вызова из других объектов данной подсистемы.
// 
// Для объемных общих модулей рекомендуется разбивать этот раздел на подразделы, по функциональному признаку. Например: 
//
//#Область ОбновлениеИнформационнойБазы
//
//#КонецОбласти


#КонецОбласти"}
},
{0,
{"Модуль формы",0,1,"МодульФ[ормы]","////////////////////////////////////////////////////////////////////////////////
// Заголовок модуля представляет собой комментарий в самом начале модуля. 
// В заголовке модуля приводится его краткое описание и условия применения.
// Для модулей форм в заголовке рекомендуется размещать описание параметров формы.
//
// Н-р: Клиентские процедуры и функции общего назначения:
// - для работы со списками в формах;
// - для работы с журналом регистрации;
// - для обработки действий пользователя в процессе редактирования
//   многострочного текста, например комментария в документах;
// - прочее.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Раздел «Обработчики событий формы» содержит процедуры-обработчики событий формы: ПриСозданииНаСервере, ПриОткрытии и т.п. 


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Раздел «Обработчики событий элементов шапки формы» содержит процедуры-обработчики элементов, 
// расположенных в основной части формы (все, что не связано с таблицами на форме). 


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы<ИмяТаблицыФормы>

// В разделах «Обработчики событий элементов таблицы формы <имя таблицы формы>» 
// размещаются процедуры-обработчики таблиц формы и элементов таблиц. 
// Для процедур-обработчиков каждой таблицы должен быть создан свой раздел. 


#КонецОбласти

#Область ОбработчикиКомандФормы

// Раздел «Обработчики команд формы» содержит процедуры-обработчики команд формы 
// (имена которых задаются в свойстве Действие команд формы). 


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// содержит процедуры и функции, составляющие внутреннюю реализацию модуля формы. 
// 
// Для объемных модулей рекомендуется разбивать этот раздел на подразделы, по функциональному признаку. Например: 
//
//#Область ОбновлениеИнформационнойБазы
//
//#КонецОбласти



#КонецОбласти"}
},
{0,
{"Модуль объекта",0,1,"МодульОбъ[екта]","////////////////////////////////////////////////////////////////////////////////
// Заголовок модуля представляет собой комментарий в самом начале модуля. 
// В заголовке модуля приводится его краткое описание и условия применения.
// Для модулей форм в заголовке рекомендуется размещать описание параметров формы.
//
// Н-р: Клиентские процедуры и функции общего назначения:
// - для работы со списками в формах;
// - для работы с журналом регистрации;
// - для обработки действий пользователя в процессе редактирования
//   многострочного текста, например комментария в документах;
// - прочее.
//  
////////////////////////////////////////////////////////////////////////////////


#Область ОписаниеПеременных



#КонецОбласти

#Область ПрограммныйИнтерфейс

// Раздел «Программный интерфейс» содержит экспортные процедуры и функции, предназначенные для использования 
// в других модулях конфигурации или другими программами (например, через внешнее соединение). 
// Не следует в этот раздел помещать экспортные функции и процедуры, которые предназначены для вызова 
// исключительно из модулей самого объекта, его форм и команд. 
//
// Например, процедуры заполнения табличной части документа, которые вызываются из обработки заполнения в модуле объекта 
// и из формы документа в обработчике команды формы не являются программным интерфейсом модуля объекта, 
// т.к. вызываются только в самом модуле и из форм этого же объекта. 
// Их следует размещать в разделе «Служебные процедуры и функции». 


#КонецОбласти

#Область ОбработчикиСобытий

// Раздел «Обработчики событий» содержит обработчики событий модуля объекта (ПриЗаписи, ПриПроведении и др.) 


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Раздел «Служебный программный интерфейс» имеет такое же предназначение, как и в общих модулях. 
// предназначен для модулей, которые являются частью некоторой функциональной подсистемы. 
// В нем должны быть размещены экспортные процедуры и функции, которые допустимо вызывать 
// только из других функциональных подсистем этой же библиотеки.


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// содержит процедуры и функции, составляющие внутреннюю реализацию модуля объекта. 
// В тех случаях, когда модуль объекта является частью некоторой функциональной подсистемы, 
// включающей в себя несколько объектов метаданных, в этом разделе также могут быть размещены служебные 
// экспортные процедуры и функции, предназначенные только для вызова из других объектов данной подсистемы.
// 
// Для объемных модулей рекомендуется разбивать этот раздел на подразделы, по функциональному признаку. Например: 
//
//#Область ОбновлениеИнформационнойБазы
//
//#КонецОбласти



#КонецОбласти

#Область Инициализация

#КонецОбласти"}
},
{0,
{"Модуль команды",0,0,"","#Область ПрограммныйИнтерфейс
// Код процедур и функций
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Код процедур и функций
#КонецОбласти"}
},
{0,
{"Область",0,1,"Обла[сть]","#Область <?""Введите имя области"">



#КонецОбласти //<?""Введите имя области"">"}
},
{0,
{"Обработчики Команд Формы",0,0,"","#Область ОбработчикиКомандФормы

// Раздел «Обработчики команд формы» содержит процедуры-обработчики команд формы 
// (имена которых задаются в свойстве Действие команд формы). 


#КонецОбласти
"}
},
{0,
{"Обработчики Событий Формы",0,0,"","#Область ОбработчикиСобытийФормы

// Раздел «Обработчики событий формы» содержит процедуры-обработчики событий формы: ПриСозданииНаСервере, ПриОткрытии и т.п. 


#КонецОбласти"}
},
{0,
{"Служебные Процедуры И Функции",0,0,"","#Область СлужебныеПроцедурыИФункции

// содержит процедуры и функции, составляющие внутреннюю реализацию модуля формы. 
// 
// Для объемных модулей рекомендуется разбивать этот раздел на подразделы, по функциональному признаку. Например: 
//
//#Область ОбновлениеИнформационнойБазы
//
//#КонецОбласти



#КонецОбласти"}
},
{0,
{"Программный Интерфейс",0,0,"","#Область ПрограммныйИнтерфейс

// Раздел «Программный интерфейс» содержит экспортные процедуры и функции, предназначенные для использования 
// в других модулях конфигурации или другими программами (например, через внешнее соединение). 
// Не следует в этот раздел помещать экспортные функции и процедуры, которые предназначены для вызова 
// исключительно из модулей самого объекта, его форм и команд. 
//
// Например, процедуры заполнения табличной части документа, которые вызываются из обработки заполнения в модуле объекта 
// и из формы документа в обработчике команды формы не являются программным интерфейсом модуля объекта, 
// т.к. вызываются только в самом модуле и из форм этого же объекта. 
// Их следует размещать в разделе «Служебные процедуры и функции». 


#КонецОбласти"}
},
{0,
{"Служебный Программный Интерфейс",0,0,"","#Область СлужебныйПрограммныйИнтерфейс

// Раздел «Служебный программный интерфейс» имеет такое же предназначение, как и в общих модулях. 
// предназначен для модулей, которые являются частью некоторой функциональной подсистемы. 
// В нем должны быть размещены экспортные процедуры и функции, которые допустимо вызывать 
// только из других функциональных подсистем этой же библиотеки.


#КонецОбласти"}
}
},
{7,
{"Полезные мелочи",1,0,"",""},
{0,
{"Регистрация ссылки в узел обмена",0,1,"","Процедура РегистрацияИзФайла(СсылкаНаДокумент)
	
	лОрганизация = Справочники.ПредопределенныеЭлементы.Орг_Геба;
	лУзелОбмена  = ВыбратьУзелОбмена (Организация);
	
	Если ЗначениеЗаполнено(лУзелОбмена) Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(лУзелОбмена, Рез.СсылкаНаДокумент);
	КонецЕсли;
	
КонецПроцедуры

Функция ВыбратьУзелОбмена (Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ""ВЫБРАТЬ
	|	РегистрацияНестлеОрганизации.Ссылка
	|ИЗ
	|	ПланОбмена.РегистрацияНестле.Организации КАК РегистрацияНестлеОрганизации
	|ГДЕ
	|	РегистрацияНестлеОрганизации.Организация = &Организация"";
	Запрос.УстановитьПараметр(""Организация"", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		УзелОбмена = Выборка.Ссылка;
	Иначе
		УзелОбмена = ПланыОбмена.РегистрацияНестле.ПустаяСсылка();
	КонецЕсли;
	
	Возврат УзелОбмена;
	
КонецФункции
"}
},
{0,
{"ПодсказкаПоОбъектуМетаданных",0,1,"подсказ[ка]","Если ЛОЖЬ Тогда //ПОТОМ УДАЛИТЬ
	//подставить нужную инициализацию (создание объекта, конструктор Новый... и т.д.), по которому нужна подсказка
	Док = Документы.ЗаказПокупателя.СоздатьДокумент();
КонецЕсли;"}
},
{0,
{"ПараметрыОтбора",0,0,"[ПараметрыО]тбора","ПараметрыОтбора = Новый Структура;
ПараметрыОтбора.Вставить(""НазваниеОтбора"", Отбор);
"}
},
{0,
{"Удаление лишних символов в строке",0,0,"","ДопустимыеСимволы = ""0123456789AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"";
ЛишниеСимволы = СтрСоединить(СтрРазделить(ИсходнаяСтрока,ДопустимыеСимволы));
ИтоговаяСтрока = СтрСоединить(СтрРазделить(ИсходнаяСтрока,ЛишниеСимволы));

"}
},
{0,
{"Обратный цикл",0,0,"","Для Сч = 1 - ТаблицаЗначений.Количество() По 0 Цикл
    ТаблицаЗначений.Удалить(ТаблицаЗначений.Получить(-Сч));
    // или
    ТаблицаЗначений.Удалить(-Сч);
КонецЦикла;
"}
},
{0,
{"ТекстСообщения",0,0,"ТекстСоо[бщения]","ТекстСообщения = НСтр(""ru=''"");"}
},
{0,
{"ТекстОшибки",0,0,"ТекстО[шибки]","ТекстОшибки = НСтр(""ru=''"");"}
}
},
{3,
{"Работа с JSON",1,0,"",""},
{0,
{"Сформировать JSON",0,0,"","// преборазует входящую структуру в JSON
// экранирует не ASCII символы, для отключения поправить параметры записи
//
// ПАРАМЕТРЫ:
// ВходящиеДанные - Структура
//	Ключ - строка
//	Значение - Строка, Число, Дата, Булево, Массив, Структура -
// 		любое серилизуемое в JSON значение
// ФорматироватьJSON - БУЛЕВО - если нужно сформировать JSON для вывода в форматированном виде
//
// Возвращаемое значение:
// 	Строка - сформированный JSON
//
Функция СформироватьJSON(ВходящиеДанные, ФорматироватьJSON = Ложь)
	
	Если ФорматироватьJSON Тогда
		СимволФорматирования = Символы.Таб;
	Иначе
		СимволФорматирования = Неопределено;	
	КонецЕсли;
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(,СимволФорматирования,, ЭкранированиеСимволовJSON.СимволыВнеASCII);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, ВходящиеДанные);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции // СформироватьJSON()


"}
},
{0,
{"Форматирование структуры JSON",0,0,"","// шаблон для процедуры форматирования подготовленной структуры для формирования JSON
// удаление концевых пробелы, форматирование даты и времени, замена пустых значений на null или свой вариант
//
Процедура ВыполнитьПостОбработкуЗначнийВыгрузки(СтруктураКВыгрузке)
	
	Для каждого КлючСтруктуры ИЗ СтруктураКВыгрузке Цикл
		
		Если ТипЗнч(КлючСтруктуры.Значение) = Тип(""Число"") Тогда
			
			СтруктураКВыгрузке[КлючСтруктуры.Ключ] = КлючСтруктуры.Значение;	
			
		ИначеЕсли ТипЗнч(КлючСтруктуры.Значение) = Тип(""Булево"") Тогда
			
			СтруктураКВыгрузке[КлючСтруктуры.Ключ] = ?(КлючСтруктуры.Значение, 1, 0);
			
		ИначеЕсли НЕ ЗначениеЗаполнено(КлючСтруктуры.Значение) Тогда
			// любые не заполненые значения, кроме типов Число и Булево,в случае пустоты заменяются на ""null""
			
			СтруктураКВыгрузке[КлючСтруктуры.Ключ] = ""null"";
	
		ИначеЕсли ТипЗнч(КлючСтруктуры.Значение) = Тип(""Строка"") Тогда
			
			СтруктураКВыгрузке[КлючСтруктуры.Ключ] = СокрЛП(КлючСтруктуры.Значение);	
			
		ИначеЕсли ТипЗнч(КлючСтруктуры.Значение) = Тип(""Дата"") Тогда
			
			СтруктураКВыгрузке[КлючСтруктуры.Ключ] = Формат(КлючСтруктуры.Значение, ""ДФ='dd.MM.yyyy hh:mm:ss'"");	
			
		Иначе
			
			СтруктураКВыгрузке[КлючСтруктуры.Ключ] = КлючСтруктуры.Значение;	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
"}
},
{0,
{"Прочитать JSON (из файла)",0,0,"","Функция ПреборазоватьJSONвСоответствие(ПутьКФайлуJSON)
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.ОткрытьФайл(ПутьКФайлуJSON);
	ДанныеJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
	ЧтениеJSON.Закрыть();
	
	Возврат ДанныеJSON;
	
КонецФункции
"}
}
},
{3,
{"Работа с HTTP",1,0,"",""},
{0,
{"Get-Запрос к DaData ",0,0,"","// get-запрос
//
// ПАРАМЕТРЫ:
// Сервер - строка - Адрес сервер (""dadata.ru"")
// Токен - строка - Открытый токен авторизации
// Токен - строка - Открытый токен авторизации
// СтрокаЗапроса - Строка - сформированный JSON для отправки запроса
//
Функция DaData_GET(Сервер, Токен, СтрокаЗапроса, флВставитьСекретныйКлюч = Истина, СекретныйТокен = Неопределено)
	
	ssl1 = Новый ЗащищенноеСоединениеOpenSSL();
	
	HTTPСоединение = Новый HTTPСоединение(Сервер,,,,,20,ssl1);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить(""Authorization"", ""Token "" + Токен);
	Если флВставитьСекретныйКлюч Тогда
		Заголовки.Вставить(""X-Secret"", СекретныйТокен);
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос(СтрокаЗапроса, Заголовки);
	
	Попытка
		Результат = HTTPСоединение.Получить(HTTPЗапрос);
	Исключение
		
		Результат = Неопределено;
		
		Текстсообщения = НСтр(""ru='Произошла сетевая ошибка!'"");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Текстсообщения;
		Сообщение.Сообщить();
		
	КонецПопытки;
	
	Возврат Результат;
	
 КонецФункции"}
},
{0,
{"POST запрос к DaData",0,0,"","// отправляет POST-запрос к сервису
//
// ПАРАМЕТРЫ:
// АдресРесурса - Строка - строка запрос тех или иных данных, согласно api-сервиса
// 	АдресРесурса = ""/suggestions/api/4_1/rs/findById/party""
//  АдресРесурса = ""/suggestions/api/4_1/rs/suggest/party""
// ДанныеДляТелаЗапроса - Структура, Соответствие - данные для формирования тела запроса
//  Н-р: ДанныеДляТелаЗапроса.Вставить(""query"", СтрокаПоиска); // СтрокаПоиска
// 
Функция DaData_POST(Сервер, Токен, АдресРесурса, ДанныеДляТелаЗапроса)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеДляТелаЗапроса);
	
	СтрокаДанные = ЗаписьJSON.Закрыть();
	
	ssl1 = Новый ЗащищенноеСоединениеOpenSSL();
	
	HTTPСоединение = Новый HTTPСоединение(Сервер,,,,,90,ssl1);
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить(""Content-Type"", ""application/json"");
	HTTPЗапрос.Заголовки.Вставить(""Accept"", ""application/json"");
	HTTPЗапрос.Заголовки.Вставить(""Authorization"", ""Token "" + Токен);
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаДанные, ""UTF-8"", ИспользованиеByteOrderMark.НеИспользовать);
	Попытка
		Результат = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		
		Результат = Ложь;
		
		Текстсообщения = НСтр(""ru='Произошла сетевая ошибка!'"");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Текстсообщения;
		Сообщение.Сообщить();
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции"}
},
{0,
{"Обработать ответ от DaData",0,0,"","Функция ОбработатьОтветСервисаDaData(ДанныеОтветаDaData)
	
	КодУспешногоОтветаHTTP = 200;
	Если ДанныеОтветаDaData.КодСостояния <> КодУспешногоОтветаHTTP Тогда
		
		ДанныеОтвета = Неопределено;
		Текстсообщения = НСтр(""ru='Ошибка соединения с сервисом!'"");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Текстсообщения;
		Сообщение.Сообщить();
		
	Иначе
		
		ДанныеОтвета = ДанныеОтветаDaData.ПолучитьТелоКакСтроку();
		
	КонецЕсли;
	
	Возврат ДанныеОтвета;
	
КонецФункции
"}
}
},
{1,
{"БСП",1,0,"",""},
{1,
{"Контактная информация",1,0,"",""},
{0,
{"Создание контактной информации для объекта",0,0,"","ПартнерОбъект = Справочники.Партнеры.СоздатьЭлемент();
лДатаЗагрузки = ТекущаяДатаСеанса();

ДемоАдрес = ""Россия, Новосибирская область, Новосибирск"";
ВидАдрес = УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени(""АдресПартнера"");
УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
	ПартнерОбъект, 
	ДемоАдрес, 
	ВидАдрес, 
	лДатаЗагрузки);
	
ДемоТелефон = ""+71117778899"";	
ВидТелефон = УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени(""ТелефонПартнера"");
УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
	ПартнерОбъект, 
	ДемоТелефон, 
	ВидТелефон, 
	лДатаЗагрузки);
	
Демо_email = ""+1@2.ru"";
ВидЭлектронныйАдрес = УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени(""EmailПартнера"");
УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
	ПартнерОбъект, 
	Демо_email, 
	ВидЭлектронныйАдрес, 
	лДатаЗагрузки);
"}
}
}
},
{1,
{"Буфер обмена",1,0,"",""},
{0,
{"ВставитьИзБуфера",0,0,"","Функция ВставитьИзБуфера()
	
	#Если Клиент Тогда 
		ОбъектБуфера = Новый COMОбъект(""htmlfile""); 
		возврат ОбъектБуфера.ParentWindow.ClipboardData.Getdata(""Text""); 
	#КонецЕсли 
	
КонецФункции

Функция ВставитьИзБуфера_ВнешняяКомпонента()
	
	// есть различные внешние компоненты, которые можно использовать
	
КонецФункции

Функция ВставитьИзБуфера_устаревший()
	
	ЭлементыФормы.Добавить(Тип(""ПолеHTMLДокумента""), ""Поле_HTML_Документа_acb123"", Ложь); 
	Окно = ЭлементыФормы.Поле_HTML_Документа_acb123.Документ.ParentWindow; 
	Окно.ClipboardData.SetData(""Text"", ""текст в буфер""); 
	ЭлементыФормы.Удалить(ЭлементыФормы.Индекс(ЭлементыФормы.Найти(""Поле_HTML_Документа_acb123""))); 
	
КонецФункции"}
}
},
{4,
{"Типовые вызовы 1С",1,0,"",""},
{0,
{"ОбъявлениеПроцедуры",0,1,"Проц[едура]","<?"""", ВыборВарианта, ""<без контекста>"", """", ""&НаКлиенте"", ""&НаКлиенте"", ""&НаСервереБезКонтекста"", ""&НаСервереБезКонтекста"", ""&НаСервере"", ""&НаСервере"">
Процедура <?""Введите наименование процедуры"">()
	
	<?>
	
КонецПроцедуры"}
},
{0,
{"ОбъявлениеФункции",0,1,"Фун[кция]","<?"""", ВыборВарианта, ""<без контекста>"", """", ""&НаКлиенте"", ""&НаКлиенте"", ""&НаСервереБезКонтекста"", ""&НаСервереБезКонтекста"", ""&НаСервере"", ""&НаСервере"">
Функция <?""Введите наименование функции"">()
	
	<?>
	
КонецФункции"}
},
{0,
{"Для каждого",0,1,"Для к[аждого]","Для каждого ЭлементКоллекции ИЗ <?""Название коллекции""> Цикл
	
	<?>
	
КонецЦикла;"}
},
{0,
{"Пока",0,1,"Пока","Пока Выборка.Следующий() Цикл
	
	<?>
	
КонецЦикла;"}
}
},
{1,
{"Любимая цветовая схема",1,0,"",""},
{0,
{"Цветовая схема конфигуратора",0,0,"","// Темная цветовая схема

Low contrast colorschemes:
Ключевые слова: D24C15
Константы типа ""Число"": B68900
Константы типа ""Строка"": 4CA49C
Константы типа ""Дата"": 859900
Идентификаторы: 258BD3
Операторы: D42F33
Комментарии: 93A1A1
Препроцессор: D53584
Прочее: 899A33  
Фон: 002B36"}
}
}
}
}